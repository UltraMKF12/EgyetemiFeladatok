/*
Egy √ºgyv√©di irod√°ba egyszerre √©rkezik ùëõ szem√©ly, akiknek az int√©znival√≥it az
√ºgyv√©d ismeri, √≠gy azt is tudja, hogy egy-egy szem√©llyel h√°ny percet fog elt√∂lteni.
√Ållap√≠tsuk meg azt a sorrendet, amelyben fogadnia kellene a szem√©lyeket ahhoz,
hogy az √°tlagos v√°rakoz√°si id≈ë minim√°lis legyen!
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <iomanip>
using namespace std;

int main()
{
    int n;
    cin >> n;

    vector<int> tomb(n);
    for (int i = 0; i < n; i++)
    {
        cin >> tomb[i];
    }

    //√°tlag v√°rakoz√°si id≈ë √∫gy minim√°lis, hogy n√∂vekv≈ë sorrendbe vannak a kliensek id≈ë szerint.
    sort(tomb.begin(), tomb.end());

    double varakozasi_idok = 0;
    for (int i = 0; i < n-1; i++)
    {
        //PL: 10 30 60-ra:
        //10 percet kel lvarjon a 30 as √©s a 60-as, ami 20 perc √∂sszesen.
        //30 percet kell v√°rjon a 60-as
        //ez √∂sszesen 50 perc. ezt elosszuk n-el, mert n kliens van ami 16.66...

        //A k√©plet, az utols√≥ el≈ëtti kliens idej√©ig megy.
        // Hozz√°adja, a bentl√©ti idej√©t annyiszor ah√°ny ember van m√©g ut√°nna. (-1 a tomb cimezes miatt kell)
        varakozasi_idok += (tomb[i] * (n-i-1));
    }

    //Atlag kiszamitasa
    varakozasi_idok /= n;
    
    cout << fixed << setprecision(2) << varakozasi_idok;
    
    return 0;
}