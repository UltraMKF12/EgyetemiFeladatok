// Sz√©ri J√≥zsef - sjim2307
//BorAdasvetel
/*
Egy falu f≈ë√∫tc√°j√°n ùëõ lakos √©l, minden k√©t egym√°s melletti h√°z k√∂z√∂tt
ugyanakkora a t√°vols√°g. A falu j√≥ borterm≈ë vid√©ken tal√°lhat√≥, √≠gy a lak√≥k
sz√≠vesen fogyasztanak, de adnak is el bort. √ârdekes m√≥don a falun bel√ºl a
kereslet √©s a k√≠n√°lat mindig egyenl≈ë. Tudv√°n, hogy k√©t egym√°s melletti h√°z
k√∂z√∂tt sz√°ll√≠tani egy liter bort mindig egy egys√©gnyi munk√°ba ker√ºl √©s ismerv√©n,
hogy melyik lakos h√°ny liter bort szeretne eladni vagy v√°s√°rolni, hat√°rozzuk
meg a minim√°lis munkamennyis√©get, amely sz√ºks√©ges ahhoz, hogy minden lakos
ig√©nye ki legyen el√©g√≠tve.*/

#include <iostream>
#include <vector>
using namespace std;

int main()
{
    // freopen("bemenet.txt", "r", stdin);
    // freopen("kimenet.txt", "w", stdout);

    int n;
    cin >> n;

    vector<long long> lakosok_bor_igenyei(n);
    for (int i = 0; i < n; i++)
    {
        cin >> lakosok_bor_igenyei[i];
    }
    
    unsigned long long minimalis_munka = 0;

    // Mindig hozz√°adjuk az eredm√©nyhez, hogy h√°ny bort cipelt√ºnk √°t a m√°sik h√°zhoz, majd onnan mennyit a k√∂vetkez≈ëh√∂z.
    // Ez√©rt kell az Abszol√∫t √©rt√©k mindig
    for (int i = 0; i < n-1; i++)
    {
        minimalis_munka += abs(lakosok_bor_igenyei[i]);
        lakosok_bor_igenyei[i+1] += lakosok_bor_igenyei[i];
    }
    
    cout << minimalis_munka;
    return 0;
}